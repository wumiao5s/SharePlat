<html lang="zh-cn">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Swift学习历程07 - Swift中类的使用</title>
    <link type="text/css" rel="stylesheet" href="/css/blog-common.css?v=8F6jO9aWZhOryqKsIFGUkSbXpyPVKDwgWwvpie3eJis1" />
    <link id="MainCss" type="text/css" rel="stylesheet" href="/css/bundle-BOOK.css?v=DaIdaa-2GlCJY57BeysMEAHbKkfdzZNJbosbSdqmsv41" />
    <link href="/css/180542.css" rel="stylesheet" />
    <script src="/Scripts/jquery.js"></script>
    <script type="text/javascript">var currentBlogApp = 'miaosha5s', cb_enable_mathjax = false;</script>
</head>
<body>
    <input type="hidden" name="chapterId" id="chapterId" value="5513482" />
    <a name="top"></a>
    <div id="header">
        <div id="HeaderTitle">
            <div id="subTitle"></div>
        </div>
    </div>
    <div id="main">
        <div id="post_detail">
            <div class="post">
                <h2>
                    <a id="ctl01_TitleUrl">Swift学习历程07 - Swift中类的使用</a>
                </h2>
                <div id="cnblogs_post_body">
                    
			献给一起学习的小伙伴

做OC开发也快2年了,最近公司要求Swift来开发,组里的小伙伴就叫我整理资料给他们,所以就抽空写了这个,每天写一点,把OC 和Swift 的不同点都标注出来,方便大家对比,我也小小的回顾一下,希望看的小伙伴们持续关注.
今天大概说下Swift中类的使用,开搞:

1- 类的介绍和定义

在Swift中如何定义类呢?
class是Swift中的关键字,用于定义类
定义的类,可以没有父类.那么该类是rootClass
通常情况下,定义类时.继承自NSObject(非OC的NSObject)

   class 类名 : SuperClass {
       // 定义属性和方法
   }
1- 如何定义类的属性

Swift中类的属性有多种
存储属性:存储实例的常量和变量
存储属性是最简单的属性，它作为类实例的一部分，用于存储常量和变量
可以给存储属性提供一个默认值，也可以在初始化方法中对其进行初始化
下面是存储属性的写法
age和name都是存储属性,用来记录该学生的年龄和姓名
chineseScore和mathScore也是存储属性,用来记录该学生的语文分数和数学分数

   class Student : NSObject {
       // 定义属性
       // 存储属性
       var age : Int = 0
       var name : String?

       var chineseScore : Double = 0.0
       var mathScore : Double = 0.0
   }

   // 创建学生对象
   let stu = Student()

   // 给存储属性赋值
   stu.age = 10
   stu.name = &quot;why&quot;

   stu.chineseScore = 89.0
   stu.mathScore = 98.0

计算属性
计算属性并不存储实际的值，而是提供一个getter和一个可选的setter来间接获取和设置其它属性
计算属性一般只提供getter方法
如果只提供getter，而不提供setter，则该计算属性为只读属性,并且可以省略get{}
下面是计算属性的写法
averageScore是计算属性,通过chineseScore和mathScore计算而来的属性
在setter方法中有一个newValue变量,是系统指定分配的

class Student : NSObject {
    // 定义属性
    // 存储属性
    var age : Int = 0
    var name : String?

    var chineseScore : Double = 0.0
    var mathScore : Double = 0.0

    // 计算属性
    var averageScore : Double {
        get {
            return (chineseScore + mathScore) / 2
        }

        // 没有意义,因为之后获取值时依然是计算得到的
        // newValue是系统分配的变量名,内部存储着新值
        set {
            self.averageScore = newValue
        }
    }
}



类属性
类属性是与类相关联的，而不是与类的实例相关联
所有的类和实例都共有一份类属性.因此在某一处修改之后,该类属性就会被修改
类属性的设置和修改,需要通过类来完成
下面是类属性的写法
类属性使用static来修饰
courseCount是类属性,用来记录学生有多少门课程

class Student : NSObject {
    // 定义属性
    // 存储属性
    var age : Int = 0
    var name : String?

    var chineseScore : Double = 0.0
    var mathScore : Double = 0.0

    // 计算属性
    var averageScore : Double {
        get {
            return (chineseScore + mathScore) / 2
        }

        // 没有意义.newValue是系统分配的变量名,内部存储着新值
        set {
            self.averageScore = newValue
        }
    }

    // 类属性
    static var corseCount : Int = 0
}

// 设置类属性的值
Student.corseCount = 3
// 取出类属性的值
print(Student.corseCount)

监听属性的改变 (这个很重要 以后经常用)
在OC中我们可以重写set方法来监听属性的改变
Swift中可以通过属性观察者来监听和响应属性值的变化
通常是监听存储属性和类属性的改变.(对于计算属性，我们不需要定义属性观察者，因为我们可以在计算属性的setter中直接观察并响应这种值的变化)
我们通过设置以下观察方法来定义观察者

willSet：在属性值被存储之前设置。此时新属性值作为一个常量参数被传入。该参数名默认为newValue，我们可以自己定义该参数名
didSet：在新属性值被存储后立即调用。与willSet相同，此时传入的是属性的旧值，默认参数名为oldValue
willSet与didSet只有在属性第一次被设置时才会调用，在初始化时，不会去调用这些监听方法

监听的方式如下:监听age和name的变化

class Person : NSObject {
    var name : String? {
        // 可以给newValue自定义名称
        // 这个是new是重命名  代替newValue  下同
        willSet (new){ // 属性即将改变,还未改变时会调用的方法
            // 在该方法中有一个默认的系统属性newValue,用于存储新值
            print(name)
            print(new)
        }
        // 可以给oldValue自定义名称
        didSet (old) { // 属性值已经改变了,会调用的方法
            // 在该方法中有一个默认的系统属性oldValue,用于存储旧值
            print(name)
            print(old)
        }
    }
    var age : Int = 0
    var height : Double = 0.0
}

let p : Person = Person()

// 在赋值时,监听该属性的改变
// 在OC中是通过重写set方法
// 在swift中,可以给属性添加监听器
p.name = &quot;why&quot;

以前的文章
Swift学习历程01
Swift学习历程02 - 判断语句 循环语句
Swift学习历程03 - 字符串 数组 字典
Swift学习历程04 - 元组 可选类型 类型转化
Swift学习历程05 - 函数 类型转化
Swift学习历程06 - 枚举类型 结构体 类型转化
今天就先写这些了,还有其他事,还有一些小伙伴私信我,问我的微博 微信 ,我以后就统一在结尾都贴上吧!
博客:http://www.cnblogs.com/hongdongheng
微博:http://weibo.com/u/3041860075
微信:nan46825
希望小伙伴多多留言和点赞,和我交流.
写于 2016年5月20日 晚












		
                    <div id="blog_post_info_block">
                        <div id="EntryTag"></div>
                        <div id="blog_post_info">
                            <div id="author_profile">
                                <div id="author_profile_info" class="author_profile_info">
                                    <div class="clear"></div>
                                    <div id="author_profile_honor"></div>
                                </div>
                                <div class="postDesc" style="text-align: left">阅读(<span id="post_view_count"></span>)</div>
                                <div id="div_digg">
                                    <div class="diggit">
                                        <span class="diggnum" id="digg_count">0</span>
                                    </div>
                                    <div class="buryit">
                                        <span class="burynum" id="bury_count">0</span>
                                    </div>
                                    <div class="clear"></div>
                                    <div class="diggword" id="digg_tips">
                                        (请您对文章做出评价)
                                    </div>
                                </div>
                            </div>
                            <div class="clear"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="feedback_area_title">评论列表</div>
        <div class="feedbackNoItems"></div>

        <div id="comment_form_container">
        </div>
    </div>


    <!--页面脚本-->
    <script type="text/javascript">
        function login() {
            window.location.href = "/UserOperation/Login?returnUrl=" + window.location.pathname;
        }

        $(function () {
            var ZanCaiFunc = function (chapterId, action) {
                $.ajax({
                    type: "POST",
                    url: "/Chapters/ZanCaiClick",
                    data: { chapterId: chapterId, action: action },
                    success: function (data) {
                        if (data.Status == "ok") {
                            var obj;
                            if (action == "zan") {
                                obj = $("#digg_count");
                            }
                            else if (action == "cai") {
                                obj = $("#bury_count");
                            }

                            var count = parseInt($(obj).text()) + 1;
                            $(obj).text(count);
                            $("#digg_tips").text("提交成功");
                        }
                        else {
                            $("#digg_tips").html(data.Msg);
                        }
                        $("#digg_tips").attr("style", "color:red")
                    },
                    error: function () {
                        alert("通讯错误");
                    }
                });
            };

            //"赞"点击
            $(".diggit").click(function () {
                var chapterId = $("#chapterId").val();
                ZanCaiFunc(chapterId, "zan");
            });

            //"踩"点击
            $(".buryit").click(function () {
                var chapterId = $("#chapterId").val();
                ZanCaiFunc(chapterId, "cai");
            });

            //异步获取文章踩,赞数
            var chapterId = $("#chapterId").val();
            $.ajax({
                type: "GET",
                url: "/Chapters/GetCaiZanCount?chapterId=" + chapterId,
                success: function (data) {
                    $("#digg_count").text(data.ZanCount);
                    $("#bury_count").text(data.CaiCount);
                }
            });

            //获取阅读数
            $.ajax({
                type: "GET",
                url: "/Chapters/GetViewCount?id=" + chapterId,
                success: function (data) {
                    $("#post_view_count").text(data);
                }
            });

            //新增阅读数
            $.ajax({
                type: "GET",
                url: "/Chapters/IncreaseViewCount?id=" + chapterId,
            });

            //异步获取文章评论
            $.ajax({
                type: "GET",
                url: "/Chapters/GetComments?id=" + chapterId,
                success: function (data) {
                    if (data.count > 0) {
                        var comments = $.parseJSON(data.comments);
                        for (var i = 0; i < comments.length; i++) {
                            var comment = comments[i];
                            $('<div class="feedbackItem"><div class="feedbackListSubtitle"><a href="#' + comment.Id + '" class="layer"></a><a name="' + comment.Id + '" id="comment_anchor_' + comment.Id + '"></a><span class="comment_date">' + comment.PostTime + '</span> ' + comment.UserName + '</div><div class="feedbackCon"><div id="comment_body_' + comment.Id + '" class="blog_comment_body">' + comment.Comment + '</div></div></div>').appendTo(".feedbackNoItems");
                        }
                    }
                }
            });

            //检查是否登录
            $.ajax({
                type: "GET",
                url: "/UserOperation/CheckLogin",
                success: function (data) {
                    if (data == false) {
                        $('<div class="login_tips">注册用户登录后才能发表评论，请 <a rel="nofollow" href="javascript:void(0);"  class="underline" onclick="login()">登录</a></div>').appendTo("#comment_form_container");
                    }
                    else {
                        $('<div id="commentform_title">发表评论</div><span id="tip_comment" style="color:Red"></span><div class="commentbox_main"><div class="commentbox_title"><div class="commentbox_title_left">评论内容：</div><div class="commentbox_title_right"></div></div><div class="clear"></div><textarea id="tbCommentBody" class="comment_textarea"></textarea></div><p id="commentbox_opt"><input id="btn_comment_submit" type="button" class="comment_btn" value="提交评论"></p>').appendTo("#comment_form_container");
                        //点击提交评论
                        $("#btn_comment_submit").click(function () {
                            SubmitComment();
                        });
                    }
                }
            });

            //提交评论
            var SubmitComment = function () {
                var comment = $("#tbCommentBody").val();
                var chapterId = $("#chapterId").val();
                if (comment.length <= 0) {
                    alert("提交内容不能为空");
                    return;
                }
                $.ajax({
                    type: "POST",
                    url: "/Chapters/SubComment",
                    data: { chapterId: chapterId, comment: comment },
                    success: function (data) {
                        if (data.Status == "ok") {
                            var time = data.Time;
                            var userName = data.UserName;
                            var id = data.Id;
                            //var commentContent = data.Comment;
                            $('<div class="feedbackItem"><div class="feedbackListSubtitle"><a href="#' + id + '" class="layer"></a><a name="' + id + '" id="comment_anchor_' + id + '"></a><span class="comment_date">' + time + '</span> ' + userName + '</div><div class="feedbackCon"><div id="comment_body_' + id + '" class="blog_comment_body">' + comment + '</div></div></div>').appendTo(".feedbackNoItems");
                            $("#tbCommentBody").val("");  //清空
                        }
                        else {
                            alert("评论失败了~");
                        }
                    }
                });
            }

        })


    </script>
</body>
</html>
