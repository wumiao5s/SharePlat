<html lang="zh-cn">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Asp.net Mvc 自定义Session (一)</title>
    <link type="text/css" rel="stylesheet" href="/css/blog-common.css?v=8F6jO9aWZhOryqKsIFGUkSbXpyPVKDwgWwvpie3eJis1" />
    <link id="MainCss" type="text/css" rel="stylesheet" href="/css/bundle-BOOK.css?v=DaIdaa-2GlCJY57BeysMEAHbKkfdzZNJbosbSdqmsv41" />
    <link href="/css/180542.css" rel="stylesheet" />
    <script src="/Scripts/jquery.js"></script>
    <script type="text/javascript">var currentBlogApp = 'miaosha5s', cb_enable_mathjax = false;</script>
</head>
<body>
    <input type="hidden" name="chapterId" id="chapterId" value="5512803" />
    <a name="top"></a>
    <div id="header">
        <div id="HeaderTitle">
            <div id="subTitle"></div>
        </div>
    </div>
    <div id="main">
        <div id="post_detail">
            <div class="post">
                <h2>
                    <a id="ctl01_TitleUrl">Asp.net Mvc 自定义Session (一)</a>
                </h2>
                <div id="cnblogs_post_body">
                    
			　　大家都知道用系统默认的session 会存在这样的问题 如果用户过多的话 session 会自动消亡，而且不能支持分布式和集群。
　　这系列博客主要讲解&nbsp; 怎样 解决用户过多的session自动消亡，和分布式集群
　　使用例子

 Session["test"] = "啄木鸟";  

完全不改变系统的使用风格，可以直接升级系统；
&nbsp;
&nbsp;
　&nbsp; 在这里我们主要用的 HttpRuntime.cache 和 memcache。 希望读者这跟着我的思路，一步一步来设计自定义Session
　　首先，我们想既然有两个数据存取工具，就必须有一个接口&nbsp; 来解耦使用的他的类，从而可以轻而易举的切换数据存储工具，而不影响使用它的类
&nbsp;　接口如下：
　　

 public interface ICache
    {
        /// &lt;summary&gt;
        /// 数据加入缓存，并使用全局配置的过期时间
        /// &lt;/summary&gt;
        /// &lt;param name="key"&gt;键&lt;/param&gt;
        /// &lt;param name="obj"&gt;数据&lt;/param&gt;
        void Put(string key, object obj);
        /// &lt;summary&gt;
        /// 数据加入缓存，并指定过期时间（分钟）
        /// &lt;/summary&gt;
        /// &lt;param name="key"&gt;键&lt;/param&gt;
        /// &lt;param name="obj"&gt;数据&lt;/param&gt;
        /// &lt;param name="expireMinutes"&gt;过期时间&lt;/param&gt;
        void Put(string key, object obj, int expireMinutes);
        /// &lt;summary&gt;
        /// 拿出缓存数据
        /// &lt;/summary&gt;
        /// &lt;param name="key"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        object Get(string key);
        /// &lt;summary&gt;
        /// 手动删除缓存数据
        /// &lt;/summary&gt;
        /// &lt;param name="key"&gt;&lt;/param&gt;
        void Delete(string key);
    }

　　接下来 我们来实现这两个数据存储工具类
　　一个是系统自带的HttpRuntime.cache
　　

 public class RuntimeCache:ICache
    {
        readonly static System.Web.Caching.Cache httpRuntimeCache = System.Web.HttpRuntime.Cache;
        readonly static int _expireMinutes = 20;  //ConfigConstants.ConfigManager.Config.Cache_ExpireMinutes;配置默认多少秒过时
        public void Put(string key, object obj)
        {
            httpRuntimeCache.Insert(key,obj);
        }

        public void Put(string key, object obj, int expireMinutes)
        {
            httpRuntimeCache.Insert(key, obj, null, System.Web.Caching.Cache.NoAbsoluteExpiration, TimeSpan.FromMinutes(expireMinutes));
        }

        public object Get(string key)
        {
            return httpRuntimeCache.Get(key);
        }

        public void Delete(string key)
        {
             httpRuntimeCache.Remove(key);
        }
    }

　　上面这个工具我想大家多知道，如果不知道的可以百度 HttpRuntime.Cache&nbsp; 来学习 ，在这里我就不讲解了（其实里面有很多的设计思路可以学习）
&nbsp;
　　另一个的就是memcache,redis 我会在后面加上去
　　

 public class MemcacheCache:ICache
    {
        private static readonly MemcachedClient m_memcachedClient;
        private static string m_memcacheStr = ConfigConstants.FrameConfigManager.Config.MemcacheStr ?? "127.0.0.1:11211";
        static MemcacheCache()
        {

            string[] servers = m_memcacheStr.Split(',');//
            try
            {
                //初始化池
                SockIOPool pool = SockIOPool.GetInstance();
                pool.SetServers(servers);
                pool.InitConnections = 3;
                pool.MinConnections = 3;
                pool.MaxConnections = 5;
                pool.SocketConnectTimeout = 1000;
                pool.SocketTimeout = 3000;
                pool.MaintenanceSleep = 30;
                pool.Failover = true;
                pool.Nagle = false;
                pool.Initialize();
                m_memcachedClient = new Memcached.ClientLibrary.MemcachedClient();
                m_memcachedClient.EnableCompression = false;
            }
            catch (Exception ex)
            {
                int i = 0;
            }
        }

        public void Put(string key, object obj)
        {
            m_memcachedClient.Set(key, obj);
        }

        public void Put(string key, object obj, int expireMinutes)
        {
            m_memcachedClient.Set(key, obj, DateTime.Now.AddMinutes(expireMinutes));
        }

        public object Get(string key)
        {
            return m_memcachedClient.Get(key);
        }

        public void Delete(string key)
        {
            m_memcachedClient.Delete(key);
        }
    }

　　　　memcache的详细配置，可以找其他资料学习
　　
　　　 到这里为止，是不是感觉有点像我们的工厂模式 前段，没错就要用到工厂模式
　&nbsp;&nbsp; 　我们再新建一个类 叫做
　　　　

 /// &lt;summary&gt;
    /// 缓存管理者
    /// &lt;/summary&gt;
   public class CacheManager :Singleton&lt;CacheManager&gt;,ICache
    {
        #region 私有变量
        private static string _cacheProvider = ConfigConstants.FrameConfigManager.Config.Cache_Provider ?? "runtimecache";
        private ICache _iCache;
       
        #endregion

        #region 构造方法
        /// &lt;summary&gt;
        /// 类构造方法，对外不支持创建它的实例对象
        /// &lt;/summary&gt;
        static CacheManager() { }
        private CacheManager()
        {
            switch (_cacheProvider.ToLower())
            { 
                case"runtimecache":
                    _iCache = new RuntimeCache();
                    break;
                case "memcachecache":
                    _iCache = new MemcacheCache();
                    break;
                default:
                    throw new ArgumentException("缓存提供者只支持RunTimeCache和RedisCache");
            }
        }
        #endregion 
        public void Put(string key, object obj)
        {
            _iCache.Put(key, obj);
        }

        public void Put(string key, object obj, int expireMinutes)
        {
            _iCache.Put(key,obj,expireMinutes);
        }

        public object Get(string key)
        {
            return _iCache.Get(key);
        }

        public void Delete(string key)
        {
            _iCache.Delete(key);
        }
    }

&nbsp;
　　我想这个类 大家都能看的懂，唯有这个Singleton&lt;CacheManager&gt; 大家可能有点 不能明白，因为这个是我自己分装的单例模式，只要继承了他，这个类就是单利了，我会再下一次博客讲明白怎样分装的。到这里我们就实现了使用和提供解耦，我想告诉大家的就是设计模式会根据你的代码量来循循渐进，不要特意看设计模式
　　我们有了这些准备，下一篇就好讲如何自定义session
　　
&nbsp;











		
                    <div id="blog_post_info_block">
                        <div id="EntryTag"></div>
                        <div id="blog_post_info">
                            <div id="author_profile">
                                <div id="author_profile_info" class="author_profile_info">
                                    <div class="clear"></div>
                                    <div id="author_profile_honor"></div>
                                </div>
                                <div class="postDesc" style="text-align: left">阅读(<span id="post_view_count"></span>)</div>
                                <div id="div_digg">
                                    <div class="diggit">
                                        <span class="diggnum" id="digg_count">0</span>
                                    </div>
                                    <div class="buryit">
                                        <span class="burynum" id="bury_count">0</span>
                                    </div>
                                    <div class="clear"></div>
                                    <div class="diggword" id="digg_tips">
                                        (请您对文章做出评价)
                                    </div>
                                </div>
                            </div>
                            <div class="clear"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="feedback_area_title">评论列表</div>
        <div class="feedbackNoItems"></div>

        <div id="comment_form_container">
        </div>
    </div>


    <!--页面脚本-->
    <script type="text/javascript">
        function login() {
            window.location.href = "/UserOperation/Login?returnUrl=" + window.location.pathname;
        }

        $(function () {
            var ZanCaiFunc = function (chapterId, action) {
                $.ajax({
                    type: "POST",
                    url: "/Chapters/ZanCaiClick",
                    data: { chapterId: chapterId, action: action },
                    success: function (data) {
                        if (data.Status == "ok") {
                            var obj;
                            if (action == "zan") {
                                obj = $("#digg_count");
                            }
                            else if (action == "cai") {
                                obj = $("#bury_count");
                            }

                            var count = parseInt($(obj).text()) + 1;
                            $(obj).text(count);
                            $("#digg_tips").text("提交成功");
                        }
                        else {
                            $("#digg_tips").html(data.Msg);
                        }
                        $("#digg_tips").attr("style", "color:red")
                    },
                    error: function () {
                        alert("通讯错误");
                    }
                });
            };

            //"赞"点击
            $(".diggit").click(function () {
                var chapterId = $("#chapterId").val();
                ZanCaiFunc(chapterId, "zan");
            });

            //"踩"点击
            $(".buryit").click(function () {
                var chapterId = $("#chapterId").val();
                ZanCaiFunc(chapterId, "cai");
            });

            //异步获取文章踩,赞数
            var chapterId = $("#chapterId").val();
            $.ajax({
                type: "GET",
                url: "/Chapters/GetCaiZanCount?chapterId=" + chapterId,
                success: function (data) {
                    $("#digg_count").text(data.ZanCount);
                    $("#bury_count").text(data.CaiCount);
                }
            });

            //获取阅读数
            $.ajax({
                type: "GET",
                url: "/Chapters/GetViewCount?id=" + chapterId,
                success: function (data) {
                    $("#post_view_count").text(data);
                }
            });

            //新增阅读数
            $.ajax({
                type: "GET",
                url: "/Chapters/IncreaseViewCount?id=" + chapterId,
            });

            //异步获取文章评论
            $.ajax({
                type: "GET",
                url: "/Chapters/GetComments?id=" + chapterId,
                success: function (data) {
                    if (data.count > 0) {
                        var comments = $.parseJSON(data.comments);
                        for (var i = 0; i < comments.length; i++) {
                            var comment = comments[i];
                            $('<div class="feedbackItem"><div class="feedbackListSubtitle"><a href="#' + comment.Id + '" class="layer"></a><a name="' + comment.Id + '" id="comment_anchor_' + comment.Id + '"></a><span class="comment_date">' + comment.PostTime + '</span> ' + comment.UserName + '</div><div class="feedbackCon"><div id="comment_body_' + comment.Id + '" class="blog_comment_body">' + comment.Comment + '</div></div></div>').appendTo(".feedbackNoItems");
                        }
                    }
                }
            });

            //检查是否登录
            $.ajax({
                type: "GET",
                url: "/UserOperation/CheckLogin",
                success: function (data) {
                    if (data == false) {
                        $('<div class="login_tips">注册用户登录后才能发表评论，请 <a rel="nofollow" href="javascript:void(0);"  class="underline" onclick="login()">登录</a></div>').appendTo("#comment_form_container");
                    }
                    else {
                        $('<div id="commentform_title">发表评论</div><span id="tip_comment" style="color:Red"></span><div class="commentbox_main"><div class="commentbox_title"><div class="commentbox_title_left">评论内容：</div><div class="commentbox_title_right"></div></div><div class="clear"></div><textarea id="tbCommentBody" class="comment_textarea"></textarea></div><p id="commentbox_opt"><input id="btn_comment_submit" type="button" class="comment_btn" value="提交评论"></p>').appendTo("#comment_form_container");
                        //点击提交评论
                        $("#btn_comment_submit").click(function () {
                            SubmitComment();
                        });
                    }
                }
            });

            //提交评论
            var SubmitComment = function () {
                var comment = $("#tbCommentBody").val();
                var chapterId = $("#chapterId").val();
                if (comment.length <= 0) {
                    alert("提交内容不能为空");
                    return;
                }
                $.ajax({
                    type: "POST",
                    url: "/Chapters/SubComment",
                    data: { chapterId: chapterId, comment: comment },
                    success: function (data) {
                        if (data.Status == "ok") {
                            var time = data.Time;
                            var userName = data.UserName;
                            var id = data.Id;
                            //var commentContent = data.Comment;
                            $('<div class="feedbackItem"><div class="feedbackListSubtitle"><a href="#' + id + '" class="layer"></a><a name="' + id + '" id="comment_anchor_' + id + '"></a><span class="comment_date">' + time + '</span> ' + userName + '</div><div class="feedbackCon"><div id="comment_body_' + id + '" class="blog_comment_body">' + comment + '</div></div></div>').appendTo(".feedbackNoItems");
                            $("#tbCommentBody").val("");  //清空
                        }
                        else {
                            alert("评论失败了~");
                        }
                    }
                });
            }

        })


    </script>
</body>
</html>
